Refactoring in hindsight builds better foresight.
Mind the coefficient, go beyond asymptotic notation.
Assumptions about abstractions can be deadly.
When thinking about distributed storage, remember the CAP theorem. Data: No CAP. Or as the senior devs say it, you can't have Consitency, Availability and Parition tolerance so you must choose two.
Gauge the size of what you're building and decide the layers of abstraction you want to work on accordingly. (Don't add dependencies where a few lines of code will suffice)
